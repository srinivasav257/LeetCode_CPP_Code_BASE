class Solution {
public:
    string mergeAlternately(string word1, string word2) {
        string merged(word1.length() + word2.length(), ' '); // Preallocate space for the merged string
        char* mergedPtr = &merged[0]; // Pointer to the beginning of the merged string
        const char* word1Ptr = word1.c_str(); // Pointer to the beginning of word1
        const char* word2Ptr = word2.c_str(); // Pointer to the beginning of word2

        while (*word1Ptr || *word2Ptr) {
            if (*word1Ptr) {
                *mergedPtr++ = *word1Ptr++;
            }
            if (*word2Ptr) {
                *mergedPtr++ = *word2Ptr++;
            }
        }

        return merged;
     }
        // int l1 = word1.length(), l2 = word2.length();
        // string ans(l1+l2, ' ');
        // int i1 = 0, i2 = 0;
        // while(i1 < l1 || i2 < l2) {
        //     if (i1 < l1) {
        //         ans[i1+i2-1] = word1[i1++];
        //     }
        //     if (i2 < l2) {
        //         ans[i1+i2-1] = word2[i2++];
        //     }
        // }
        // // ans[l1+l2] = '\0';
        // return ans;
    // }
};
